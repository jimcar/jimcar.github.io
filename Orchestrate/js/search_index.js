var search_data = {"index":{"searchIndex":["orchestrate","api","curbrequest","error","partyrequest","procedural","request","response","header","responsebody","wrapper","application","collection","connect","document","error","eventtype","graph","metadata","primarykey","proceduralinterface","record","response","responsebody","result","schema","schemacollection","schemaeventtype","schemagraph","searchresult","simplecachecollection","simplecacherefs","simplecacherequest","simplecacheresponse","body","header","simplecachestore","rails","event","model","schema","schemacollection","searchresult","tutorial","buildtheapp","createevent","creategraph","getevents","getgraph","gettingstarted","populatefilmscollection","settinguprails","thecreateaction","thesearchaction","theshowaction","string","symbol","add_event()","add_graph()","all()","attr_map()","attributes()","attributes()","attrs()","attrs()","attrs()","build_attr_map()","build_query_map()","build_url()","cache()","cache()","cache()","cache()","cache_enabled?()","cache_request()","classname()","classname()","client()","client()","client()","collection_names()","collections()","config()","connect()","create()","create!()","create_event()","curl()","define_attr_query()","define_collection()","define_collection()","define_event_type()","define_event_type()","define_event_type()","define_event_type()","define_graph()","define_graph()","define_graph()","define_graph()","delete_collection()","delete_key()","destroy()","destroy()","destroy_all()","disable()","disable()","document()","document()","enable()","enable()","enabled?()","error_codes()","errors()","events()","exists?()","fetch()","fetch()","fetch_events()","fetch_graph()","find()","find_by()","find_by_method()","first()","flush!()","flush!()","flush!()","fullclassname()","funkify()","get()","get()","get()","get_by_ref()","get_by_ref()","get_cache_collection()","get_cc()","get_collection()","get_collection_from_class()","get_events()","get_events()","get_graph()","get_graph()","get_key()","get_ref()","get_ref()","graph()","id()","init_collection_name()","inst_args()","instance()","is_enabled?()","last()","list()","list()","load()","load()","load_collection()","location()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","oa_delete()","oa_delete_key()","oa_get()","oa_get_by_ref()","oa_get_events()","oa_get_graph()","oa_list()","oa_put()","oa_put_event()","oa_put_graph()","oa_put_if_match()","oa_put_if_none_match()","oa_search()","ocollection()","options()","options()","orchestrate_client()","orchestrate_collection_name()","orchestrate_collection_name()","orchestrate_primary_key()","orchestrate_ref_value()","orchestrate_ref_value()","orchio_delete()","orchio_delete()","orchio_delete_key()","orchio_get()","orchio_get_by_ref()","orchio_get_events()","orchio_get_graph()","orchio_list()","orchio_put()","orchio_put_event()","orchio_put_graph()","orchio_put_if_match()","orchio_put_if_none_match()","orchio_query_str()","orchio_search()","perform()","perform()","perform()","properties()","properties()","put_event()","put_graph()","put_key()","put_key_if_match()","put_key_if_none_match()","qmap()","qmap()","respond_to?()","response()","result()","result_keys()","retval()","sanitize()","save()","save()","save()","save()","save()","save!()","save_event()","save_event()","save_event()","save_graph()","save_graph()","save_graph()","save_if_match()","save_if_none_match()","schema()","schema()","search()","search()","search_results()","send_request()","set_ref_value()","simple_cache()","simple_cache_init()","success?()","success?()","take()","to_event()","to_json_direct()","to_orchio_rails_attr()","to_orchio_rails_attr()","to_rails()","update_attribute()","update_attributes()","update_rails()","verbose?()","verbose?()","verbose?()","where()"],"longSearchIndex":["orchestrate","orchestrate::api","orchestrate::api::curbrequest","orchestrate::api::error","orchestrate::api::partyrequest","orchestrate::api::procedural","orchestrate::api::request","orchestrate::api::response","orchestrate::api::response::header","orchestrate::api::responsebody","orchestrate::api::wrapper","orchestrate::application","orchestrate::application::collection","orchestrate::application::connect","orchestrate::application::document","orchestrate::application::error","orchestrate::application::eventtype","orchestrate::application::graph","orchestrate::application::metadata","orchestrate::application::primarykey","orchestrate::application::proceduralinterface","orchestrate::application::record","orchestrate::application::response","orchestrate::application::responsebody","orchestrate::application::result","orchestrate::application::schema","orchestrate::application::schemacollection","orchestrate::application::schemaeventtype","orchestrate::application::schemagraph","orchestrate::application::searchresult","orchestrate::application::simplecachecollection","orchestrate::application::simplecacherefs","orchestrate::application::simplecacherequest","orchestrate::application::simplecacheresponse","orchestrate::application::simplecacheresponse::body","orchestrate::application::simplecacheresponse::header","orchestrate::application::simplecachestore","orchestrate::rails","orchestrate::rails::event","orchestrate::rails::model","orchestrate::rails::schema","orchestrate::rails::schemacollection","orchestrate::rails::searchresult","orchestrate::rails::tutorial","orchestrate::rails::tutorial::buildtheapp","orchestrate::rails::tutorial::createevent","orchestrate::rails::tutorial::creategraph","orchestrate::rails::tutorial::getevents","orchestrate::rails::tutorial::getgraph","orchestrate::rails::tutorial::gettingstarted","orchestrate::rails::tutorial::populatefilmscollection","orchestrate::rails::tutorial::settinguprails","orchestrate::rails::tutorial::thecreateaction","orchestrate::rails::tutorial::thesearchaction","orchestrate::rails::tutorial::theshowaction","string","symbol","orchestrate::application::primarykey#add_event()","orchestrate::application::primarykey#add_graph()","orchestrate::rails::model::all()","orchestrate::rails::schema#attr_map()","orchestrate::rails::model::attributes()","orchestrate::rails::model#attributes()","orchestrate::rails::model#attrs()","orchestrate::rails::model::attrs()","orchestrate::rails::schema#attrs()","orchestrate::rails::schema::build_attr_map()","orchestrate::rails::schema#build_query_map()","orchestrate::api::wrapper#build_url()","orchestrate::application::document#cache()","orchestrate::application::record#cache()","orchestrate::application::simplecacherequest#cache()","orchestrate::application::simplecachestore#cache()","orchestrate::application::document#cache_enabled?()","orchestrate::application::record#cache_request()","orchestrate::application::document#classname()","orchestrate::rails::schema#classname()","orchestrate::application::connect::client()","orchestrate::application::record::client()","orchestrate::application::record#client()","orchestrate::application::schema#collection_names()","orchestrate::application::schema#collections()","orchestrate::application::connect::config()","orchestrate::application::connect::connect()","orchestrate::rails::model::create()","orchestrate::rails::model::create!()","orchestrate::rails::model#create_event()","orchestrate::api::curbrequest#curl()","orchestrate::rails::model#define_attr_query()","orchestrate::application::schema#define_collection()","orchestrate::rails::schema::define_collection()","orchestrate::application::collection#define_event_type()","orchestrate::application::schema#define_event_type()","orchestrate::application::schemacollection#define_event_type()","orchestrate::rails::schema::define_event_type()","orchestrate::application::collection#define_graph()","orchestrate::application::schema#define_graph()","orchestrate::application::schemacollection#define_graph()","orchestrate::rails::schema::define_graph()","orchestrate::api::procedural#delete_collection()","orchestrate::api::procedural#delete_key()","orchestrate::rails::model::destroy()","orchestrate::rails::model#destroy()","orchestrate::rails::model::destroy_all()","orchestrate::application::simplecachestore::disable()","orchestrate::application::simplecachestore#disable()","orchestrate::application::simplecacherefs#document()","orchestrate::application::simplecacheresponse::body#document()","orchestrate::application::simplecachestore::enable()","orchestrate::application::simplecachestore#enable()","orchestrate::application::simplecacherequest#enabled?()","orchestrate::application::error#error_codes()","orchestrate::api::error#errors()","orchestrate::rails::model#events()","orchestrate::rails::model::exists?()","orchestrate::application::simplecachecollection#fetch()","orchestrate::application::simplecachestore#fetch()","orchestrate::application::simplecachecollection#fetch_events()","orchestrate::application::simplecachecollection#fetch_graph()","orchestrate::rails::model::find()","orchestrate::rails::model::find_by()","orchestrate::rails::model::find_by_method()","orchestrate::rails::model::first()","orchestrate::application::simplecachecollection#flush!()","orchestrate::application::simplecacherefs#flush!()","orchestrate::application::simplecachestore#flush!()","orchestrate::rails::schema#fullclassname()","orchestrate::application::record#funkify()","orchestrate::application::schema#get()","orchestrate::application::simplecacherequest#get()","orchestrate::rails::model#get()","orchestrate::api::procedural#get_by_ref()","orchestrate::rails::model#get_by_ref()","orchestrate::application::simplecachestore#get_cache_collection()","orchestrate::application::simplecachestore#get_cc()","orchestrate::application::schema#get_collection()","orchestrate::rails::schema#get_collection_from_class()","orchestrate::api::procedural#get_events()","orchestrate::application::simplecacherequest#get_events()","orchestrate::api::procedural#get_graph()","orchestrate::application::simplecacherequest#get_graph()","orchestrate::api::procedural#get_key()","orchestrate::application::simplecachecollection#get_ref()","orchestrate::application::simplecachestore#get_ref()","orchestrate::rails::model#graph()","orchestrate::rails::event#id()","orchestrate::application::record#init_collection_name()","orchestrate::application::record#inst_args()","orchestrate::application::simplecachestore::instance()","orchestrate::application::simplecachestore#is_enabled?()","orchestrate::rails::model::last()","orchestrate::api::procedural#list()","orchestrate::rails::model::list()","orchestrate::application::schema#load()","orchestrate::rails::schema::load()","orchestrate::application::schema#load_collection()","orchestrate::application::simplecacheresponse::header#location()","orchestrate::rails::model::method_missing()","orchestrate::api::curbrequest::new()","orchestrate::api::partyrequest::new()","orchestrate::api::request::new()","orchestrate::api::response::new()","orchestrate::api::response::header::new()","orchestrate::api::responsebody::new()","orchestrate::api::wrapper::new()","orchestrate::application::collection::new()","orchestrate::application::document::new()","orchestrate::application::eventtype::new()","orchestrate::application::graph::new()","orchestrate::application::metadata::new()","orchestrate::application::primarykey::new()","orchestrate::application::record::new()","orchestrate::application::response::new()","orchestrate::application::result::new()","orchestrate::application::schema::new()","orchestrate::application::schemacollection::new()","orchestrate::application::schemaeventtype::new()","orchestrate::application::schemagraph::new()","orchestrate::application::simplecachecollection::new()","orchestrate::application::simplecacherefs::new()","orchestrate::application::simplecacherequest::new()","orchestrate::application::simplecacheresponse::new()","orchestrate::application::simplecacheresponse::body::new()","orchestrate::application::simplecacheresponse::header::new()","orchestrate::application::simplecachestore::new()","orchestrate::rails::event::new()","orchestrate::rails::model::new()","orchestrate::application::proceduralinterface#oa_delete()","orchestrate::application::proceduralinterface#oa_delete_key()","orchestrate::application::proceduralinterface#oa_get()","orchestrate::application::proceduralinterface#oa_get_by_ref()","orchestrate::application::proceduralinterface#oa_get_events()","orchestrate::application::proceduralinterface#oa_get_graph()","orchestrate::application::proceduralinterface#oa_list()","orchestrate::application::proceduralinterface#oa_put()","orchestrate::application::proceduralinterface#oa_put_event()","orchestrate::application::proceduralinterface#oa_put_graph()","orchestrate::application::proceduralinterface#oa_put_if_match()","orchestrate::application::proceduralinterface#oa_put_if_none_match()","orchestrate::application::proceduralinterface#oa_search()","orchestrate::application::record#ocollection()","orchestrate::api::partyrequest#options()","orchestrate::api::request#options()","orchestrate::application::record#orchestrate_client()","orchestrate::application::record#orchestrate_collection_name()","orchestrate::rails::model#orchestrate_collection_name()","orchestrate::application::record#orchestrate_primary_key()","orchestrate::application::record#orchestrate_ref_value()","orchestrate::rails::model#orchestrate_ref_value()","orchestrate::application::record#orchio_delete()","orchestrate::application::record::orchio_delete()","orchestrate::application::record::orchio_delete_key()","orchestrate::application::record#orchio_get()","orchestrate::application::record#orchio_get_by_ref()","orchestrate::application::record#orchio_get_events()","orchestrate::application::record#orchio_get_graph()","orchestrate::application::record::orchio_list()","orchestrate::application::record#orchio_put()","orchestrate::application::record#orchio_put_event()","orchestrate::application::record#orchio_put_graph()","orchestrate::application::record#orchio_put_if_match()","orchestrate::application::record#orchio_put_if_none_match()","orchestrate::rails::model::orchio_query_str()","orchestrate::application::record::orchio_search()","orchestrate::api::curbrequest#perform()","orchestrate::api::partyrequest#perform()","orchestrate::api::request#perform()","orchestrate::rails::model::properties()","orchestrate::rails::schema#properties()","orchestrate::api::procedural#put_event()","orchestrate::api::procedural#put_graph()","orchestrate::api::procedural#put_key()","orchestrate::api::procedural#put_key_if_match()","orchestrate::api::procedural#put_key_if_none_match()","orchestrate::rails::model::qmap()","orchestrate::rails::schema#qmap()","orchestrate::rails::model::respond_to?()","orchestrate::application::simplecacherequest#response()","orchestrate::application::result#result()","orchestrate::api::responsebody#result_keys()","orchestrate::rails::model#retval()","orchestrate::application::record::sanitize()","orchestrate::application::document#save()","orchestrate::application::simplecachecollection#save()","orchestrate::application::simplecacherefs#save()","orchestrate::application::simplecachestore#save()","orchestrate::rails::model#save()","orchestrate::rails::model#save!()","orchestrate::application::simplecachecollection#save_event()","orchestrate::application::simplecacherequest#save_event()","orchestrate::rails::model#save_event()","orchestrate::application::simplecachecollection#save_graph()","orchestrate::application::simplecacherequest#save_graph()","orchestrate::rails::model#save_graph()","orchestrate::rails::model#save_if_match()","orchestrate::rails::model#save_if_none_match()","orchestrate::application::schema#schema()","orchestrate::rails::model::schema()","orchestrate::api::procedural#search()","orchestrate::rails::model::search()","orchestrate::rails::model::search_results()","orchestrate::api::wrapper#send_request()","orchestrate::application::record#set_ref_value()","orchestrate::application::record#simple_cache()","orchestrate::application::simplecachestore#simple_cache_init()","orchestrate::api::response#success?()","orchestrate::application::result#success?()","orchestrate::rails::model::take()","orchestrate::application::document#to_event()","orchestrate::rails::model#to_json_direct()","string#to_orchio_rails_attr()","symbol#to_orchio_rails_attr()","orchestrate::application::document#to_rails()","orchestrate::rails::model#update_attribute()","orchestrate::rails::model#update_attributes()","orchestrate::application::document#update_rails()","orchestrate::api::curbrequest#verbose?()","orchestrate::api::partyrequest#verbose?()","orchestrate::api::request#verbose?()","orchestrate::rails::model::where()"],"info":[["Orchestrate","","Orchestrate.html","","<p>\n<p>Ruby Application Development for Orchestrate.io\n<p>Documentation for ruby gems <code>orchestrate-api</code> and\n<code>orchestrate-rails</code> …\n"],["Orchestrate::API","","Orchestrate/API.html","","<p>orchestrate-api\n<p>Ruby gem <code>orchestrate-api</code> provides an interface to the\n<strong>Orchestrate.io</strong> <strong>API</strong>.\n<p>The <strong>Wrapper</strong> class …\n"],["Orchestrate::API::CurbRequest","","Orchestrate/API/CurbRequest.html","","\n<pre>Class Request uses curb (ruby libcurl bindings) to make the HTTP calls</pre>\n"],["Orchestrate::API::Error","","Orchestrate/API/Error.html","","<p>Not used. But it does contain nice summary of orchestrate.io api errors.\n"],["Orchestrate::API::PartyRequest","","Orchestrate/API/PartyRequest.html","","\n<pre>PartyRequest uses HTTParty to make the HTTP calls,\nreturning a PartyResponse object.</pre>\n"],["Orchestrate::API::Procedural","","Orchestrate/API/Procedural.html","","<p>Procedural interface methods (optional).\n<p>This file serves as useful documentation for the\n<strong>Orchestrate.io</strong> …\n"],["Orchestrate::API::Request","","Orchestrate/API/Request.html","","<p>Uses HTTParty to make the HTTP calls, and returns a Response object.\n"],["Orchestrate::API::Response","","Orchestrate/API/Response.html","","<p>Transforms the HTTParty response into a structure that provides ready\naccess to relevant orchestrate.io …\n"],["Orchestrate::API::Response::Header","","Orchestrate/API/Response/Header.html","","<p>Provides methods for ready access to relevant information extracted from\nthe HTTParty response headers. …\n"],["Orchestrate::API::ResponseBody","","Orchestrate/API/ResponseBody.html","","<p>Decodes body from json into a hash; provides the original body content via\nthe &#39;content&#39; method. …\n"],["Orchestrate::API::Wrapper","","Orchestrate/API/Wrapper.html","","<p>Ruby wrapper for the Orchestrate.io REST API.\n<p>The primary entry point is the <strong> #send_request</strong> method,\nwhich …\n"],["Orchestrate::Application","","Orchestrate/Application.html","","<p>orchestrate-application\n<p>This <em>hidden gem <strong>orchestrate-application</em></strong> is\nembedded within the <em>orchestrate-rails</em> …\n"],["Orchestrate::Application::Collection","","Orchestrate/Application/Collection.html","",""],["Orchestrate::Application::Connect","","Orchestrate/Application/Connect.html","","<p>Class for creating the connection between the application and the\norchestrate.io api.\n"],["Orchestrate::Application::Document","","Orchestrate/Application/Document.html","","<p>Object to encapsulate the key/value data along with the metadata associated\nwith an Orchestrate.io record. …\n"],["Orchestrate::Application::Error","","Orchestrate/Application/Error.html","",""],["Orchestrate::Application::EventType","","Orchestrate/Application/EventType.html","",""],["Orchestrate::Application::Graph","","Orchestrate/Application/Graph.html","",""],["Orchestrate::Application::Metadata","","Orchestrate/Application/Metadata.html","","<p>Holds the metadata associated with each document in the results from a GET\nrequest.\n"],["Orchestrate::Application::PrimaryKey","","Orchestrate/Application/PrimaryKey.html","","<p>Class PrimaryKey\n"],["Orchestrate::Application::ProceduralInterface","","Orchestrate/Application/ProceduralInterface.html","",""],["Orchestrate::Application::Record","","Orchestrate/Application/Record.html","","<p>Class for accessing collections belonging to an Orchestrate.io application.\n<p>public class methods for collection …\n"],["Orchestrate::Application::Response","","Orchestrate/Application/Response.html","","\n<pre>Inherits from Orchestrate::API::Response but\nClasses to handle orchestrate.io API responses - HTTParty</pre>\n"],["Orchestrate::Application::ResponseBody","","Orchestrate/Application/ResponseBody.html","",""],["Orchestrate::Application::Result","","Orchestrate/Application/Result.html","","<p>Packages the result data from GET requests. Orchestrate.io records are\nreturned as Document objects. …\n"],["Orchestrate::Application::Schema","","Orchestrate/Application/Schema.html","","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Singleton</span> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">define</span> <span class=\"ruby-identifier\">schema</span> <span class=\"ruby-keyword\">for</span> <span class=\"ruby-constant\">Orchestrate</span>.<span class=\"ruby-identifier\">io</span> <span class=\"ruby-identifier\">application</span>\n</pre>\n"],["Orchestrate::Application::SchemaCollection","","Orchestrate/Application/SchemaCollection.html","","<p>Schema support object.\n"],["Orchestrate::Application::SchemaEventType","","Orchestrate/Application/SchemaEventType.html","","<p>Schema support object.\n"],["Orchestrate::Application::SchemaGraph","","Orchestrate/Application/SchemaGraph.html","","<p>Schema support object.\n"],["Orchestrate::Application::SearchResult","","Orchestrate/Application/SearchResult.html","","<p>Container class for Orchestrate.io search results. See parent class Result\nfor more details.\n"],["Orchestrate::Application::SimpleCacheCollection","","Orchestrate/Application/SimpleCacheCollection.html","","<p>Class SimpleCacheCollection\n"],["Orchestrate::Application::SimpleCacheRefs","","Orchestrate/Application/SimpleCacheRefs.html","","<p>Stores documents in cache, indexed by ref value.\n"],["Orchestrate::Application::SimpleCacheRequest","","Orchestrate/Application/SimpleCacheRequest.html","",""],["Orchestrate::Application::SimpleCacheResponse","","Orchestrate/Application/SimpleCacheResponse.html","","\n<pre>Class to handle Orchestrate.io API responses</pre>\n"],["Orchestrate::Application::SimpleCacheResponse::Body","","Orchestrate/Application/SimpleCacheResponse/Body.html","",""],["Orchestrate::Application::SimpleCacheResponse::Header","","Orchestrate/Application/SimpleCacheResponse/Header.html","",""],["Orchestrate::Application::SimpleCacheStore","","Orchestrate/Application/SimpleCacheStore.html","","<p>When enabled, the cache mechanism:\n<p>is useful for development/testing, minimizing calls to the server. …\n"],["Orchestrate::Rails","","Orchestrate/Rails.html","","<p>orchestrate-rails\n<p>Ruby gem <code>orchestrate-rails</code> maps rails models to the\norchestrate.io api. The rails interface …\n"],["Orchestrate::Rails::Event","","Orchestrate/Rails/Event.html","","<p>Class to support *dynamically defined* orchestrate.io/event instances\n"],["Orchestrate::Rails::Model","","Orchestrate/Rails/Model.html","","<p>Base class for Rails/Orchestrate.io models.\n"],["Orchestrate::Rails::Schema","","Orchestrate/Rails/Schema.html","","<p>Extensions to parent class for mapping data between orchestrate and rails.\n"],["Orchestrate::Rails::SchemaCollection","","Orchestrate/Rails/SchemaCollection.html","","<p>Rails-specific extensions to parent class.\n"],["Orchestrate::Rails::SearchResult","","Orchestrate/Rails/SearchResult.html","","<p>Handle search results. See parent class\nOrchestrate::Application::SearchResult.\n"],["Orchestrate::Rails::Tutorial","","Orchestrate/Rails/Tutorial.html","","<p>Using the orchestrate-rails gem\n<p>The <code>orchestrate-rails</code> tutorial steps through process of\nintegrating <strong>Orchestrate.io</strong> …\n"],["Orchestrate::Rails::Tutorial::BuildTheApp","","Orchestrate/Rails/Tutorial/BuildTheApp.html","","<p>Building the rails application\n<p>Setting up the rails routing\n<p>Add the following lines to <code>&lt;rails-root&gt;/config/routes.rb</code>\n…\n"],["Orchestrate::Rails::Tutorial::CreateEvent","","Orchestrate/Rails/Tutorial/CreateEvent.html","","<p>Creating Orchestrate.io events\n<p>We&#39;ll now implement the ability to add new <code>comment</code> events\nto the collection. …\n"],["Orchestrate::Rails::Tutorial::CreateGraph","","Orchestrate/Rails/Tutorial/CreateGraph.html","","<p>Creating an Orchestrate.io graph\n<p>We&#39;ll now implement the ability to define new <code>sequel</code>\nrelations in …\n"],["Orchestrate::Rails::Tutorial::GetEvents","","Orchestrate/Rails/Tutorial/GetEvents.html","","<p>Getting orchestrate.io events\n<p>The <em>films</em> example application includes a <code>comment</code>\nfeature that provides the …\n"],["Orchestrate::Rails::Tutorial::GetGraph","","Orchestrate/Rails/Tutorial/GetGraph.html","","<p>Getting an Orchestrate.io graph\n<p>The <em>films</em> example application includes a feature to define a\n<code>sequel</code> relationship …\n"],["Orchestrate::Rails::Tutorial::GettingStarted","","Orchestrate/Rails/Tutorial/GettingStarted.html","","<p>Getting started with orchestrate-rails\n<p>Orchestrate.io offers a <em>free developer tier</em> that makes it easy …\n"],["Orchestrate::Rails::Tutorial::PopulateFilmsCollection","","Orchestrate/Rails/Tutorial/PopulateFilmsCollection.html","","<p>Populating the films collection with data\n<p>You can skip this step if you&#39;ve <strong><em>fully\npopulated</em></strong> the <em>films</em> …\n"],["Orchestrate::Rails::Tutorial::SettingUpRails","","Orchestrate/Rails/Tutorial/SettingUpRails.html","","<p>Setting up the rails environment\n<p>Gem <code>orchestrate-rails</code> has been tested with rails 4.0 and ruby\n2.0\n<p>Generating …\n"],["Orchestrate::Rails::Tutorial::TheCreateAction","","Orchestrate/Rails/Tutorial/TheCreateAction.html","","<p>Adding the create action\n<p>We&#39;ll now implement the ability to add new films to the collection.\n<p>Updating …\n"],["Orchestrate::Rails::Tutorial::TheSearchAction","","Orchestrate/Rails/Tutorial/TheSearchAction.html","","<p>Adding search capability to the example application\n<p>Orchestrate.io search allows collections to be queried …\n"],["Orchestrate::Rails::Tutorial::TheShowAction","","Orchestrate/Rails/Tutorial/TheShowAction.html","","<p>Adding the show action\n<p>We&#39;ll add the <code>show</code> action to the controller to display the\nfilm&#39;s information. …\n"],["String","","String.html","","<p>Convert property name to attribute name.\n"],["Symbol","","Symbol.html","","<p>Convert property name to attribute name. Calls\n::String#to_orchio_rails_attr.\n"],["add_event","Orchestrate::Application::PrimaryKey","Orchestrate/Application/PrimaryKey.html#method-i-add_event","(etype, ref=nil)",""],["add_graph","Orchestrate::Application::PrimaryKey","Orchestrate/Application/PrimaryKey.html#method-i-add_graph","(data)",""],["all","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-all","()","<p>Returns ordered array of all instances in the collection.\n"],["attr_map","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-attr_map","(collection_name)","<p>Returns the table that maps attribute names to property names.\n<p>Property names are the original key names …\n"],["attributes","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-attributes","()",""],["attributes","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-attributes","()","<p>Returns hash of key/value pairs.\n"],["attrs","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-attrs","()","<p>Returns array of model attribute names.\n"],["attrs","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-attrs","()","<p>Returns array of model attribute names.\n"],["attrs","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-attrs","(collection_name)",""],["build_attr_map","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-c-build_attr_map","(attrs)",""],["build_query_map","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-build_query_map","(collection)",""],["build_url","Orchestrate::API::Wrapper","Orchestrate/API/Wrapper.html#method-i-build_url","(method, args)","<p>Builds the URL for each HTTP request to the orchestrate.io api.\n"],["cache","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-cache","()","<p>Returns handle to the SimpleCacheStore singleton instance.\n"],["cache","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-cache","()","<p>Returns handle to the SimpleCacheCollection instance for this class.\n"],["cache","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-cache","()",""],["cache","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-cache","()",""],["cache_enabled?","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-cache_enabled-3F","()",""],["cache_request","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-cache_request","()","<p>Calls #cache. Explain! Used for clarity?  JMC\n"],["classname","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-classname","()",""],["classname","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-classname","(collection_name)",""],["client","Orchestrate::Application::Connect","Orchestrate/Application/Connect.html#method-c-client","()",""],["client","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-client","()","<p>Calls #client instance method.\n"],["client","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-client","()","<p>Returns the client handle for requests to the orchestrate.io api.\n"],["collection_names","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-collection_names","()",""],["collections","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-collections","()",""],["config","Orchestrate::Application::Connect","Orchestrate/Application/Connect.html#method-c-config","(config_file)",""],["connect","Orchestrate::Application::Connect","Orchestrate/Application/Connect.html#method-c-connect","()",""],["create","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-create","(key_value_pairs)","<p>Creates a new instance; updates the collection if the primary_key is not\nalready present in the collection. …\n"],["create!","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-create-21","(key_value_pairs)","<p>Creates a new instance; updates the collection.\n<p>Returns the instance upon success; false upon failure. …\n"],["create_event","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-create_event","(event_type, timestamp=nil, event_rec)","<p>Creates event instance; calls #save_event to update the collection.\n<p>Returns the event instance upon success; …\n"],["curl","Orchestrate::API::CurbRequest","Orchestrate/API/CurbRequest.html#method-i-curl","()",""],["define_attr_query","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-define_attr_query","(attribute)","<p>Defines query method to test whether the attribute value is present.\n"],["define_collection","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-define_collection","(args)",""],["define_collection","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-c-define_collection","(args)","<p>args: { :name, :properties, :event_types, :graphs, :classname }\n"],["define_event_type","Orchestrate::Application::Collection","Orchestrate/Application/Collection.html#method-i-define_event_type","(event_type, properties)",""],["define_event_type","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-define_event_type","(collection_name, event_type, properties)",""],["define_event_type","Orchestrate::Application::SchemaCollection","Orchestrate/Application/SchemaCollection.html#method-i-define_event_type","(event_type, properties)",""],["define_event_type","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-c-define_event_type","(args)",""],["define_graph","Orchestrate::Application::Collection","Orchestrate/Application/Collection.html#method-i-define_graph","(relation_kind, to_collection)",""],["define_graph","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-define_graph","(collection_name, relation_kind, to_collection)",""],["define_graph","Orchestrate::Application::SchemaCollection","Orchestrate/Application/SchemaCollection.html#method-i-define_graph","(relation_kind, to_collection)",""],["define_graph","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-c-define_graph","(args)",""],["delete_collection","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-delete_collection","(args)","<p>required: { collection }\n\n"],["delete_key","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-delete_key","(args)","<p>required: { collection, key }\n\n"],["destroy","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-destroy","(id)","<p>Delete the specified instance from the collection.\n<p>Returns boolean status.\n"],["destroy","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-destroy","()","<p>Deletes the current primary_key from the collection.\n<p>Returns boolean status.\n"],["destroy_all","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-destroy_all","()","<p>Delete the entire collection.\n<p>Returns boolean status.\n"],["disable","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-c-disable","()",""],["disable","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-disable","()",""],["document","Orchestrate::Application::SimpleCacheRefs","Orchestrate/Application/SimpleCacheRefs.html#method-i-document","(ref)",""],["document","Orchestrate::Application::SimpleCacheResponse::Body","Orchestrate/Application/SimpleCacheResponse/Body.html#method-i-document","()",""],["enable","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-c-enable","()",""],["enable","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-enable","()",""],["enabled?","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-enabled-3F","()",""],["error_codes","Orchestrate::Application::Error","Orchestrate/Application/Error.html#method-i-error_codes","()",""],["errors","Orchestrate::API::Error","Orchestrate/API/Error.html#method-i-errors","()",""],["events","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-events","(event_type, timestamp={})","<p>Returns array of event instances specified by event_type and timestamp\nrange,\n<p>where the timestamp range …\n"],["exists?","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-exists-3F","(id)","<p>Returns boolean to indicate whether the specified primary_key exists in the\ncollection.\n"],["fetch","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-fetch","(key)",""],["fetch","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-fetch","(collection, key)",""],["fetch_events","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-fetch_events","(key, etype)",""],["fetch_graph","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-fetch_graph","(key, kind)",""],["find","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-find","(arg)","<p>Find by the primary_key (id). Can be a specific id, or an array of ids.\n<p>Returns instance, or array of …\n"],["find_by","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-find_by","(key_value_pairs)","<p>Returns the first instance that matches the specified criteria.\n"],["find_by_method","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-find_by_method","(myattrs, *args, &block)","<p>Calls ::find_by for properly constructed &#39;find_by_attribute(s)&#39;\ncalls.\n<p>Example: <code>User.find_by_name_and_address(name,</code> …\n"],["first","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-first","()","<p>Returns the first (ordered) instance in the collection.\n"],["flush!","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-flush-21","()",""],["flush!","Orchestrate::Application::SimpleCacheRefs","Orchestrate/Application/SimpleCacheRefs.html#method-i-flush-21","()",""],["flush!","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-flush-21","(collection=nil)",""],["fullclassname","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-fullclassname","(collection_name)",""],["funkify","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-funkify","(etype_and_timestamp)","<p>Returns a unique identifer for the specified event.\n"],["get","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-get","(collection_name)",""],["get","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-get","(key)",""],["get","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-get","()","<p>Returns the key/value data for the current instance.\n"],["get_by_ref","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-get_by_ref","(args)","<p>required: { collection, key, ref }\n\n"],["get_by_ref","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-get_by_ref","(ref)","<p>Returns the key/value data for the current instance, found by\n<code>ref</code> value.\n"],["get_cache_collection","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-get_cache_collection","(name)",""],["get_cc","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-get_cc","(name)",""],["get_collection","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-get_collection","(name)",""],["get_collection_from_class","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-get_collection_from_class","(classname)",""],["get_events","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-get_events","(args)","<p>required: { collection, key, event_type }\n<p>optional: { timestamp }, where timestamp = { :start =&gt; start, …\n\n"],["get_events","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-get_events","(key, event_type)",""],["get_graph","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-get_graph","(args)","<p>required: { collection, key, kind }\n\n"],["get_graph","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-get_graph","(key, kind)",""],["get_key","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-get_key","(args)","<p>required: { collection, key }\n\n"],["get_ref","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-get_ref","(key)",""],["get_ref","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-get_ref","(collection_name, key)",""],["graph","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-graph","(kind)","<p>Returns array of instances associated with the specified kind of relation.\n"],["id","Orchestrate::Rails::Event","Orchestrate/Rails/Event.html#method-i-id","()",""],["init_collection_name","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-init_collection_name","(collection_name)","<p>Returns the collection name for this instance.\n<p>This method is called during initializtion with the value …\n"],["inst_args","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-inst_args","(args={})","<p>Returns hash that merges additional arguments with the ever-present\ncollection and key args.\n"],["instance","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-c-instance","()",""],["is_enabled?","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-is_enabled-3F","()",""],["last","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-last","()","<p>Returns the last (ordered) instance in the collection.\n"],["list","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-list","(args)","<p>required: { collection }\n\n"],["list","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-list","(limit=:all, start_key=nil, after_key=nil)","<p>Returns Orchestrate::Application::Result.\n<p>The start index may be optionally specified by using either …\n"],["load","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-load","(schema)","<p>Support (optional) loading of schema from a definition file\n<p>Example usage:\n\n<pre>Orchestrate::Application::Schema.instance.load ...</pre>\n"],["load","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-c-load","(schema)",""],["load_collection","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-load_collection","(collection)",""],["location","Orchestrate::Application::SimpleCacheResponse::Header","Orchestrate/Application/SimpleCacheResponse/Header.html#method-i-location","()",""],["method_missing","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-method_missing","(name, *args, &block)","<p>Calls ::find_by_method for &#39;find_by_attribute(s)&#39;.\n"],["new","Orchestrate::API::CurbRequest","Orchestrate/API/CurbRequest.html#method-c-new","(method, url, user)",""],["new","Orchestrate::API::PartyRequest","Orchestrate/API/PartyRequest.html#method-c-new","(method, url, user)","<p>Gets the common settings from the params, then any additional settings from\nthe block.\n"],["new","Orchestrate::API::Request","Orchestrate/API/Request.html#method-c-new","(method, url, user)","<p>Sets the universal attributes from the params; any additional attributes\nare set from the block.\n"],["new","Orchestrate::API::Response","Orchestrate/API/Response.html#method-c-new","(partay)","<p>Creates Header and ResponseBody objects from the HTTParty response.\nLet&#39;s Partay!\n"],["new","Orchestrate::API::Response::Header","Orchestrate/API/Response/Header.html#method-c-new","(headers, code, msg)",""],["new","Orchestrate::API::ResponseBody","Orchestrate/API/ResponseBody.html#method-c-new","(body)","<p>Initialize instance variables, based on response body contents.\n"],["new","Orchestrate::API::Wrapper","Orchestrate/API/Wrapper.html#method-c-new","(config_file)","<p>Loads settings from the configuration file and returns the client handle to\nbe used for subsequent requests. …\n"],["new","Orchestrate::Application::Collection","Orchestrate/Application/Collection.html#method-c-new","(args)","<p>args: { :name, :properties, :event_types, :graphs }\n"],["new","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-c-new","(orec, metadata)","<p>Saves the key/value data and Metadata. Saves the doc to cache when cache is\nenabled.\n"],["new","Orchestrate::Application::EventType","Orchestrate/Application/EventType.html#method-c-new","(event_type, properties)",""],["new","Orchestrate::Application::Graph","Orchestrate/Application/Graph.html#method-c-new","(kind, to_collection)",""],["new","Orchestrate::Application::Metadata","Orchestrate/Application/Metadata.html#method-c-new","(metadata)","<p>For all documents, the metadata includes:\n<p>collection\n<p>key\n"],["new","Orchestrate::Application::PrimaryKey","Orchestrate/Application/PrimaryKey.html#method-c-new","(ref)",""],["new","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-new","(params={})","<p>Performs application-level initialization functions.\n"],["new","Orchestrate::Application::Response","Orchestrate/Application/Response.html#method-c-new","()",""],["new","Orchestrate::Application::Result","Orchestrate/Application/Result.html#method-c-new","(results)","<p>Initialize instance variables, based on type of results.\n<p>results                     (key/value)\n<p>results, …\n"],["new","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-c-new","()",""],["new","Orchestrate::Application::SchemaCollection","Orchestrate/Application/SchemaCollection.html#method-c-new","(args)","<p>args: { :name, :properties, :event_types, :graphs }\n"],["new","Orchestrate::Application::SchemaEventType","Orchestrate/Application/SchemaEventType.html#method-c-new","(event_type, properties)",""],["new","Orchestrate::Application::SchemaGraph","Orchestrate/Application/SchemaGraph.html#method-c-new","(kind, to_collection)",""],["new","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-c-new","(name)",""],["new","Orchestrate::Application::SimpleCacheRefs","Orchestrate/Application/SimpleCacheRefs.html#method-c-new","()",""],["new","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-c-new","(collection)",""],["new","Orchestrate::Application::SimpleCacheResponse","Orchestrate/Application/SimpleCacheResponse.html#method-c-new","(header, body)",""],["new","Orchestrate::Application::SimpleCacheResponse::Body","Orchestrate/Application/SimpleCacheResponse/Body.html#method-c-new","(body)",""],["new","Orchestrate::Application::SimpleCacheResponse::Header","Orchestrate/Application/SimpleCacheResponse/Header.html#method-c-new","(header)",""],["new","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-c-new","()",""],["new","Orchestrate::Rails::Event","Orchestrate/Rails/Event.html#method-c-new","(event_record)",""],["new","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-new","(params={})","<p>Creates instance variable for each model attribute defined by the schema.\nInitializes any attribute values …\n"],["oa_delete","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_delete","(collection)",""],["oa_delete_key","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_delete_key","(collection, key)",""],["oa_get","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_get","()",""],["oa_get_by_ref","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_get_by_ref","(ref)",""],["oa_get_events","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_get_events","(event_type, timestamp={})",""],["oa_get_graph","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_get_graph","(kind)",""],["oa_list","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_list","(collection, path=nil)",""],["oa_put","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_put","(jdoc)",""],["oa_put_event","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_put_event","(event_type, timestamp={}, document)",""],["oa_put_graph","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_put_graph","(kind, to_collection, to_key)",""],["oa_put_if_match","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_put_if_match","(document, ref)",""],["oa_put_if_none_match","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_put_if_none_match","(document)",""],["oa_search","Orchestrate::Application::ProceduralInterface","Orchestrate/Application/ProceduralInterface.html#method-i-oa_search","(collection, query_str)",""],["ocollection","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-ocollection","()","<p>Returns the collection name associated with the current instance&#39;s\nclass.\n"],["options","Orchestrate::API::PartyRequest","Orchestrate/API/PartyRequest.html#method-i-options","()","<p>Sets up the HTTParty options hash.\n"],["options","Orchestrate::API::Request","Orchestrate/API/Request.html#method-i-options","()","<p>Sets up the HTTParty options hash.\n"],["orchestrate_client","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchestrate_client","()","<p>Returns the client handle.\n"],["orchestrate_collection_name","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchestrate_collection_name","()","<p>Returns the collection name for the current instance.\n"],["orchestrate_collection_name","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-orchestrate_collection_name","()","<p>Returns the collection name for the current instance.\n"],["orchestrate_primary_key","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchestrate_primary_key","()","<p>Returns the primary_key for the current instance.\n"],["orchestrate_ref_value","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchestrate_ref_value","()","<p>Returns the <code>ref</code> value for the current instance. The\n<code>ref</code> value is an immutable value assigned to each …\n"],["orchestrate_ref_value","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-orchestrate_ref_value","()","<p>Returns the <code>ref</code> value for the current instance. The\n<code>ref</code> value is an immutable value assigned to each …\n"],["orchio_delete","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_delete","()","<p>Deletes the primary_key and data associated with this instance from the\ncollection.\n"],["orchio_delete","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-orchio_delete","(collection)","<p>Delete the specified collection.\n"],["orchio_delete_key","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-orchio_delete_key","(collection, key)","<p>Delete key from collection.\n"],["orchio_get","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_get","()","<p>Fetches the data associated with this id from the collection.\n"],["orchio_get_by_ref","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_get_by_ref","(ref)","<p>Gets the key/value pair by its &#39;ref&#39; value.\n"],["orchio_get_events","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_get_events","(event_type, timestamp={})","<p>Gets all events of specified type, within the timestamp parameters, where\ntimestamp = { :start =&gt; …\n"],["orchio_get_graph","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_get_graph","(kind)","<p>Gets the graph for the specified kind of relation.\n"],["orchio_list","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-orchio_list","(collection, path=nil)","<p>Lists the collection contents.  The results are based the options. Returns\nResult object.\n"],["orchio_put","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_put","(jdoc)","<p>Updates the collection with the data associated with this instance.\n"],["orchio_put_event","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_put_event","(event_type, timestamp={}, document)",""],["orchio_put_graph","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_put_graph","(kind, to_collection, to_key)","<p>Add a graph/relation to the collection. Store the to_key&#39;s\n&#39;ref&#39; value if caching is enabled. …\n"],["orchio_put_if_match","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_put_if_match","(document, ref)","<p>Updates the key/value if the send&#39;ref&#39; value matches the\n&#39;ref&#39; value for the latest version …\n"],["orchio_put_if_none_match","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-orchio_put_if_none_match","(document)","<p>Updates the key/value if the key does not already exist in the collection.\n"],["orchio_query_str","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-orchio_query_str","(query_str)","<p>Returns an orchestrate-ready query string for the search request. The\nattribute names used by the model …\n"],["orchio_search","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-orchio_search","(collection, query_str)","<p>Searches the collection; encodes any whitespace contained in the query\nstring. Returns SearchResult object …\n"],["perform","Orchestrate::API::CurbRequest","Orchestrate/API/CurbRequest.html#method-i-perform","()",""],["perform","Orchestrate::API::PartyRequest","Orchestrate/API/PartyRequest.html#method-i-perform","()","<p>Sends the HTTP request and returns a PartyResponse object.\n"],["perform","Orchestrate::API::Request","Orchestrate/API/Request.html#method-i-perform","()","<p>Sends the HTTP request and returns a Response object.\n"],["properties","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-properties","()","<p>Returns array of property names.\n<p>Property names are the original key names in json documents stored in …\n"],["properties","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-properties","(collection_name)",""],["put_event","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-put_event","(args)","<p>required: { collection, key, event_type, json }\n<p>optional: { timestamp }, where timestamp is a scalar value …\n\n"],["put_graph","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-put_graph","(args)","<p>required: { collection, key, kind, to_collection, to_key }\n\n"],["put_key","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-put_key","(args)","<p>required: { collection, key, json }\n\n"],["put_key_if_match","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-put_key_if_match","(args)","<p>required: { collection, key, json, ref }\n\n"],["put_key_if_none_match","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-put_key_if_none_match","(args)","<p>required: { collection, key, json }\n\n"],["qmap","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-qmap","()","<p>Returns the table that maps attribute names to property names.\n<p>This mapping also works when the input …\n"],["qmap","Orchestrate::Rails::Schema","Orchestrate/Rails/Schema.html#method-i-qmap","(collection_name)","<p>Returns a table that maps attribute names to property names. And the\nmapping conveniently works even …\n"],["respond_to?","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-respond_to-3F","(name)","<p>Handles find_by_attribute methods.\n"],["response","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-response","(docs)",""],["result","Orchestrate::Application::Result","Orchestrate/Application/Result.html#method-i-result","()",""],["result_keys","Orchestrate::API::ResponseBody","Orchestrate/API/ResponseBody.html#method-i-result_keys","()",""],["retval","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-retval","(status, obj=nil)",""],["sanitize","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-c-sanitize","(response)","<p>Removes result data from the response body for a successful GET request\nThis is done to avoid redundancy, …\n"],["save","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-save","()","<p>Saves the document to cache.\n"],["save","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-save","(data)",""],["save","Orchestrate::Application::SimpleCacheRefs","Orchestrate/Application/SimpleCacheRefs.html#method-i-save","(ref, document)",""],["save","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-save","(document)",""],["save","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-save","()","<p>Calls #save_if_match.\n"],["save!","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-save-21","()","<p>Updates the collection with current instance data.\n<p>Returns the instance upon success; false upon failure. …\n"],["save_event","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-save_event","(data)",""],["save_event","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-save_event","(key, event_type)",""],["save_event","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-save_event","(event_type, timestamp=nil, event)","<p>Updates the collection with the specified event instance.\n<p>Returns the event instance upon success; false …\n"],["save_graph","Orchestrate::Application::SimpleCacheCollection","Orchestrate/Application/SimpleCacheCollection.html#method-i-save_graph","(data)",""],["save_graph","Orchestrate::Application::SimpleCacheRequest","Orchestrate/Application/SimpleCacheRequest.html#method-i-save_graph","(key, kind)",""],["save_graph","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-save_graph","(kind, to_collection, to_key)","<p>Updates the collection with the specified graph relation.\n<p>Returns boolean status.\n"],["save_if_match","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-save_if_match","()","<p>Updates the collection with current instance data, if the <code>ref</code>\nvalue matches the <code>ref</code> value associated …\n"],["save_if_none_match","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-save_if_none_match","()","<p>Updates the collection with current instance data, if the primary_key (id)\ndoes not exist in the collection. …\n"],["schema","Orchestrate::Application::Schema","Orchestrate/Application/Schema.html#method-i-schema","()",""],["schema","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-schema","()","<p>Returns handle to the Schema singleton instance.\n"],["search","Orchestrate::API::Procedural","Orchestrate/API/Procedural.html#method-i-search","(args)","<p>required: { collection }\n\n"],["search","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-search","(query_str, limit=:all, offset=0)","<p>Returns SearchResult. Orchestrate.io search implements Lucene Query Parser\nSyntax.\n"],["search_results","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-search_results","(query_str)","<p>Returns array of model instances that match the query string.\n"],["send_request","Orchestrate::API::Wrapper","Orchestrate/API/Wrapper.html#method-i-send_request","(method, args)","<p>Creates the Request object and sends it via the perform method, which\ngenerates and returns the Response …\n"],["set_ref_value","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-set_ref_value","(response)","<p>Updates the current instance&#39;s <code>ref</code> value, aka\n<code>etag</code>, after a successful PUT request.\n"],["simple_cache","Orchestrate::Application::Record","Orchestrate/Application/Record.html#method-i-simple_cache","()","<p>Returns handle to the SimpleCacheStore singleton instance.\n"],["simple_cache_init","Orchestrate::Application::SimpleCacheStore","Orchestrate/Application/SimpleCacheStore.html#method-i-simple_cache_init","()",""],["success?","Orchestrate::API::Response","Orchestrate/API/Response.html#method-i-success-3F","()","<p>Returns the value of HTTParty.success?\n"],["success?","Orchestrate::Application::Result","Orchestrate/Application/Result.html#method-i-success-3F","()",""],["take","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-take","()","<p>Returns the first (random) instance in the collection.\n"],["to_event","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-to_event","()","<p>Creates a new event instance from the document&#39;s key/value data.\nDefined by Orchestrate::Rails.\n"],["to_json_direct","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-to_json_direct","()","<p>Generates json for the attribute key/value pairs, replacing attribute names\nused by the model with the …\n"],["to_orchio_rails_attr","String","String.html#method-i-to_orchio_rails_attr","()",""],["to_orchio_rails_attr","Symbol","Symbol.html#method-i-to_orchio_rails_attr","()",""],["to_rails","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-to_rails","()","<p>Creates a new model instance, and calls #update_rails. Defined by\nOrchestrate::Rails.\n"],["update_attribute","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-update_attribute","(key, value)","<p>Updates the attribute and calls #save_if_match.\n"],["update_attributes","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-i-update_attributes","(key_value_pairs)","<p>Updates the attributes and calls #save_if_match.\n"],["update_rails","Orchestrate::Application::Document","Orchestrate/Application/Document.html#method-i-update_rails","(instance)","<p>Updates the key/value pairs for the model instance with key/value data from\nthe document. Defined by …\n"],["verbose?","Orchestrate::API::CurbRequest","Orchestrate/API/CurbRequest.html#method-i-verbose-3F","()",""],["verbose?","Orchestrate::API::PartyRequest","Orchestrate/API/PartyRequest.html#method-i-verbose-3F","()",""],["verbose?","Orchestrate::API::Request","Orchestrate/API/Request.html#method-i-verbose-3F","()",""],["where","Orchestrate::Rails::Model","Orchestrate/Rails/Model.html#method-c-where","(key_value_pairs)","<p>Returns all instances that match the specified criteria.\n"]]}}